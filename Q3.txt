Q3/ 
	Given that we can use existed piece of same color as part of our solution with no cost. Then the 
the simplest solition would be keep every thing the same. However once we arrive at a potential state
that have (r,q) match with one of the existed piece (of the same color) then we add the state without 
increment the g(n) - realised real cost. However, if so our heuristic would become in-admissible due to 
that there a potential pre-placed piece that we can use along the real path from this current piece to 
the solution which bring the g(n) down again hence h(n) could be greater then g(n).

	To adress this issue, we need to find away to account for these potential reduction in cost.
One way to solve this issue is to reduce all f(n) accordingly. 
	
	By pre-compile the f(n) of all pre-existed piece - of the same color, We can use those heuristic function 
to apply a discount on all hex- as long as they have f(n) greater then any of the pre-existed hex. This is applied
to the pre-existed piece as much as other piece. 
	
	In detail, once we arrive at a state, we need to find its f(n) according the the heuristic function 
we discuss in question 2. Next, we compare its f(n) against all initial piece with the same color, we reduce
the f(n) by one for each piece satisfy the condition. This solution would futher under-estimate the f(n) relative
to the realised g(n). Therefore, it is Admissible.
	
	One issue of thsi approach is that it would increase the Time complexity drasticly as soon as the the initial
piece is more then 8 - the maximum branching factor. let p be the number of piece that is pre-exist, then the 
time complexity would be now O(p^d) due to the comparison we made per potential node. This is simple to address by 
trade in d*d of space to store a predetermined 'heat map' - the array store the reduction of f(n) per 
coordinate (r, q). This heat map is create during the configuration of board.